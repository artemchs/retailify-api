// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SystemUser {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fullName          String
  email             String         @unique
  hash              String
  profilePictureKey String?
  rtHash            String?
  role              SystemUserRole @default(CASHIER)
}

model AllowedSystemUserEmail {
  email String @id
}

enum SystemUserRole {
  ADMIN
  CASHIER
  ECOMMERCE_MANAGER
}

model Supplier {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String
  contactPerson String
  email         String
  phone         String
  address       String
  goodsReceipts GoodsReceipt[]

  isArchived Boolean @default(false)
}

model Warehouse {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name            String
  address         String
  productVariants VariantToWarehouse[]
  goodsReceipts   GoodsReceipt[]

  inventoryAdjustments InventoryAdjustment[]

  outgoingTransfers InventoryTransfer[] @relation("sourceWarehouse")
  incomingTransfers InventoryTransfer[] @relation("destinationWarehouse")

  isArchived Boolean @default(false)
}

model VariantToWarehouse {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  variant     Variant?   @relation(fields: [variantId], references: [id])
  variantId   String?
  warehouse   Warehouse? @relation(fields: [warehouseId], references: [id])
  warehouseId String?

  warehouseQuantity    Int                            @default(0)
  inventoryAdjustments InventoryAdjustmentToVariant[]

  @@index([variantId, warehouseId])
}

model GoodsReceipt {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  supplier    Supplier?  @relation(fields: [supplierId], references: [id])
  supplierId  String?
  warehouse   Warehouse? @relation(fields: [warehouseId], references: [id])
  warehouseId String?

  name             String
  supplierInvoice  SupplierInvoice?
  productVariants  VariantToGoodsReceipt[]
  goodsReceiptDate DateTime

  isArchived Boolean @default(false)
}

model VariantToGoodsReceipt {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  variant        Variant?      @relation(fields: [variantId], references: [id])
  variantId      String?
  goodsReceipt   GoodsReceipt? @relation(fields: [goodsReceiptId], references: [id])
  goodsReceiptId String?

  receivedQuantity Int
  supplierPrice    Decimal @db.Decimal(8, 2)

  @@index([variantId, goodsReceiptId])
}

model SupplierInvoice {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  goodsReceipt   GoodsReceipt? @relation(fields: [goodsReceiptId], references: [id])
  goodsReceiptId String?       @unique

  paymentTerm     SupplierInvoicePaymentTerm
  paymentOption   SupplierInvoicePaymentOption
  accountsPayable Decimal                      @db.Decimal(12, 2)

  @@index([goodsReceiptId])
}

enum SupplierInvoicePaymentTerm {
  ON_DELIVERY
  IN_ADVANCE
  ON_REALIZATION
}

enum SupplierInvoicePaymentOption {
  PRIVATE_FUNDS
  CURRENT_ACCOUNT
  CASH_REGISTER
}

model Product {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title                String
  sku                  String                @unique
  description          String?               @db.Text
  media                ProductMedia[]
  colors               ProductToColor[]
  characteristicValues CharacteristicValue[]
  category             Category?             @relation(fields: [categoryId], references: [id])
  categoryId           String?
  brand                Brand?                @relation(fields: [brandId], references: [id])
  brandId              String?
  gender               ProductGender
  season               ProductSeason

  variants               Variant[]
  totalReceivedQuantity  Int       @default(0)
  totalWarehouseQuantity Int       @default(0)

  packagingLength Decimal @db.Decimal(8, 2)
  packagingWidth  Decimal @db.Decimal(8, 2)
  packagingHeight Decimal @db.Decimal(8, 2)
  packagingWeight Decimal @db.Decimal(8, 2)

  isArchived Boolean @default(false)

  @@index([title, isArchived])
}

enum ProductSeason {
  WINTER
  SPRING_FALL
  SUMMER
  ALL_SEASON
}

enum ProductGender {
  MALE
  FEMALE
  UNISEX
}

model ProductMedia {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  index Int

  product   Product? @relation(fields: [productId], references: [id])
  productId String?

  @@index([productId, index(sort: Asc)])
}

enum ProductMediaType {
  IMAGE
  VIDEO
}

model Variant {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product               Product?                @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId             String?
  goodsReceiptEntries   VariantToGoodsReceipt[]
  warehouseStockEntries VariantToWarehouse[]

  totalReceivedQuantity  Int
  totalWarehouseQuantity Int

  size    String
  barcode String   @unique @default(uuid())
  price   Decimal  @db.Decimal(8, 2)
  sale    Decimal? @db.Decimal(8, 2)

  isArchived            Boolean                 @default(false)
  InventoryTransferItem InventoryTransferItem[]

  @@index([productId, barcode])
}

model Color {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  color String

  productsToColors ProductToColor[]
}

model ProductToColor {
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  color     Color   @relation(fields: [colorId], references: [id], onDelete: Cascade)
  colorId   String

  index Int

  @@id([productId, colorId])
  @@index([productId, colorId])
}

model Characteristic {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name           String
  values         CharacteristicValue[]
  categoryGroups CategoryGroup[]
  categories     Category[]

  @@index([name])
}

model CharacteristicValue {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  value            String
  characteristic   Characteristic? @relation(fields: [characteristicId], references: [id], onDelete: Cascade)
  characteristicId String?
  products         Product[]

  @@index([characteristicId])
}

model CategoryGroup {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name            String
  characteristics Characteristic[]
  categories      Category[]

  isArchived Boolean @default(false)
}

model Category {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name            String
  productName     String
  products        Product[]
  characteristics Characteristic[]
  group           CategoryGroup?   @relation(fields: [groupId], references: [id])
  groupId         String?

  isArchived Boolean @default(false)
}

model Brand {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  products Product[]
}

model InventoryAdjustment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  date        DateTime
  reason      InventoryAdjustmentReason?     @relation(fields: [reasonId], references: [id])
  reasonId    String?
  warehouse   Warehouse?                     @relation(fields: [warehouseId], references: [id])
  warehouseId String?
  variants    InventoryAdjustmentToVariant[]

  isArchived Boolean @default(false)
}

model InventoryAdjustmentReason {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  adjustments InventoryAdjustment[]
}

model InventoryAdjustmentToVariant {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  variantToWarehouse    VariantToWarehouse?  @relation(fields: [variantToWarehouseId], references: [id])
  variantToWarehouseId  String?
  adjustment            InventoryAdjustment? @relation(fields: [inventoryAdjustmentId], references: [id])
  inventoryAdjustmentId String?
  quantityChange        Int
}

model InventoryTransfer {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name                   String
  date                   DateTime
  reason                 InventoryTransferReason? @relation(fields: [reasonId], references: [id])
  reasonId               String?
  sourceWarehouse        Warehouse?               @relation("sourceWarehouse", fields: [sourceWarehouseId], references: [id])
  sourceWarehouseId      String?
  destinationWarehouse   Warehouse?               @relation("destinationWarehouse", fields: [destinationWarehouseId], references: [id])
  destinationWarehouseId String?
  transferItems          InventoryTransferItem[]

  isArchived Boolean @default(false)
}

model InventoryTransferReason {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  transfers InventoryTransfer[]
}

model InventoryTransferItem {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inventoryTransfer   InventoryTransfer? @relation(fields: [inventoryTransferId], references: [id])
  inventoryTransferId String?
  variant             Variant?           @relation(fields: [variantId], references: [id])
  variantId           String?
  quantity            Int
}
